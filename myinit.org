#+STARTUP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(global-display-line-numbers-mode)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
;; Window-size and font size

(setq default-frame-alist
      '((top . 100) (left . 300)
        (width . 150) (height . 40)))
        ;; (cursor-color . "white")
        ;; (cursor-type . box)
        ;; (foreground-color . "yellow")
        ;; (background-color . "black")
        ;; (font . "-*-Courier-normal-r-*-*-13-*-*-*-c-*-iso8859-1")))
#+END_SRC

#+RESULTS:
: ((top . 100) (left . 300) (width . 150) (height . 40))

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which-key 
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

* ace-window
#+BEGIN_SRC emacs-lisp 
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp 
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char)
  )
#+END_SRC

* auto-complete
#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* spacemacs
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-dark t))
#+END_SRC

* Flycheck
   #+BEGIN_SRC emacs-lisp 
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
   #+END_SRC
* Misc
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)

     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))

     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))

     (use-package iedit
       :ensure t)
     (defun narrow-or-widen-dwim (p)
       "Widen if buffer is narrowed, narrow-dwim otherwise.
     Dwim means: region, org-src-block, org-subtree, or
     defun, whichever applies first. Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer
     is already narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
	     ((region-active-p)
	      (narrow-to-region (region-beginning)
				(region-end)))
	     ((derived-mode-p 'org-mode)
	      ;; `org-edit-src-code' is not a real narrowing
	      ;; command. Remove this first conditional if
	      ;; you don't want it.
	      (cond ((ignore-errors (org-edit-src-code) t)
		     (delete-other-windows))
		    ((ignore-errors (org-narrow-to-block) t))
		    (t (org-narrow-to-subtree))))
	     ((derived-mode-p 'latex-mode)
	      (LaTeX-narrow-to-environment))
	     (t (narrow-to-defun))))

   ;;  (define-key endless/toggle-map "n"
     ;;  #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing
     ;; keymap, that's how much I like this command. Only
     ;; copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
     (add-hook 'LaTeX-mode-hook
	       (lambda ()
		 (define-key LaTeX-mode-map "\C-xn"
		   nil)))
(use-package smartparens
:ensure t
  :hook (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(show-paren-mode t)
   #+END_SRC

   #+RESULTS:  
   : t
* elpy
 #+BEGIN_SRC emacs-lisp
   (use-package elpy
     :ensure t
     :config
     (elpy-enable))
 #+END_SRC

 #+RESULTS:
 : t

* Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
	 (yas-global-mode 1))

     (use-package yasnippet-snippets
       :ensure t
       )
   #+END_SRC
* Undo Tree
 #+BEGIN_SRC emacs-lisp 
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
 #+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:config
(projectile-global-mode)
(setq projectile-completion-system 'ivy))
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)


(use-package counsel-projectile
:ensure t
)

#+END_SRC

#+RESULTS:
* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))


(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

#+END_SRC

#+RESULTS:
: t
* Magit
 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t)
 #+END_SRC

 #+RESULTS:
 : t
